#+STARTUP: overview
* Some Global settings
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Ingo Richter")
(setq user-mail-address "ingo.richter@gmail.com")

(setq org-src-fontify-natively t)
(global-visual-line-mode t)
(global-set-key (kbd "<f5>") 'revert-buffer)

(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
:ensure t)
#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
:ensure t
:config
(which-key-mode))
#+END_SRC
* Orgmode
#+BEGIN_SRC emacs-lisp
(use-package org
:ensure t
:pin org)

(setq org-directory "~/Nextcloud/org")
(setq org-agenda-files (list org-directory))

(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))

(setq org-archive-location (concat org-directory "/archive/%s_archive::")
      org-default-notes-file (concat org-directory "/notes.org")
      org-refile-location (concat org-directory "/refile.org")
      org-gcal-location (concat org-directory "/gcal.org")
      org-weeklygoals-location (concat org-directory "/weekly-goals.org")
      org-journal-location (concat org-directory "/journal/journal.org")
      org-capture-templates '(("t" "To Do Item" entry
 			       (file+headline org-refile-location "Todo")
			       "* TODO %^{Titel} %^g\n  %?\n  :LOGBOOK:\n  - Added: %U\n  :END:")
			      ("a" "Appointment" entry (file org-gcal-location)
			       "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
			      ("n" "Note" entry
			       (file+headline org-default-notes-file "Notes")
			       "* Note %^{Titel} %^g\n  %?\n  :LOGBOOK:\n  - Added: %U\n  :END:")
			      ("i" "Idee" entry
			       (file+headline org-refile-location "Ideen")
			       "* Idee %^{Titel} %^g\n  %?\n  :LOGBOOK:\n  - Added: %U\n  :END:")
			      ("w" "Weekly Goals" entry
			       (file+datetree org-weeklygoals-location "Weekly Goals")
			       "* %U\n\nHigh Level Ziele fuer die x. Woche\n - [ ] $ x in die Spardose\n - [ ] Sport\n - [ ] Laufen")
			      ("j" "Journal" entry
			       (file+datetree org-journal-location)
			       "* %U - %?\n  %i" :clock-in t :clock-resume t)))

;; Org-mode settings
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(global-font-lock-mode 1)

;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))


;; have timestamp added to finished items
(setq org-log-done 'time)

;; capture templates
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
	      (sequence "WAITING(W@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
      ("DONE" :foreground "green" :weight bold)
	      ("NEXT" :foreground "blue" :weight bold))))
)
#+END_SRC
* CalDav
#+BEGIN_SRC emacs-lisp
(use-package org-caldav
  :ensure t
  :config
  (setq org-caldav-url "https://familie-richter.synology.me/remote.php/dav/calendars/ingo"
	org-caldav-calendar-id "main"
	org-caldav-inbox "~/Nextcloud/org/gcal.org"
	org-caldav-files org-agenda-files
	org-icalendar-timezone "America/Los_Angeles"
	org-icalendar-date-time-format ";TZID=%Z:%Y%m%dT%H%M%S"))

(add-hook 'org-agenda-mode-hook (lambda () (org-caldav-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-caldav-sync) ))
#+END_SRC
* Shell path
#+BEGIN_SRC emacs-lisp
;; modify the exec-path to find system apps
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
* MacOS special keys and german keyboard fixes
#+BEGIN_SRC emacs-lisp
;; fix keyboard on macOS
(if (eq system-type 'darwin)
  (progn
    ;; "fix" the broken keyboard
    (global-set-key "\M-l" '(lambda () (interactive) (insert "@")))
    (global-set-key "\M-(" (lambda () (interactive) (insert "{")))
    (global-set-key "\M-)" (lambda () (interactive) (insert "}")))
    (global-set-key "\M-8" (lambda () (interactive) (insert "[")))
    (global-set-key "\M-9" (lambda () (interactive) (insert "]")))
    (global-set-key "\M-7" '(lambda () (interactive) (insert "|")))
    (global-set-key "\M-/" '(lambda () (interactive) (insert "\\")))
    (global-set-key "\M-n" '(lambda () (interactive) (insert "~")))))
#+END_SRC
* Font Settings
#+BEGIN_SRC emacs-lisp
;; Font settings
;; Set IBM Plex Mono Medium 18 as default font
(defun fontify-frame (frame)
  (set-frame-parameter frame 'font "IBM Plex Mono Medium 18"))
(fontify-frame nil)
;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions) 
#+END_SRC
* auto-yasnippet
#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
:ensure t)
#+END_SRC
* multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:ensure t)
#+END_SRC
* yasnippet
#+BEGIN_SRC emacs-lisp
;; yasnippet plugin
(use-package yasnippet
  :ensure t
  :hook (prog-mode . yas-minor-mode)
  :config
  (setq yas-snippet-dirs
      '("~/dotfiles/yasnippets"
	"~/.emacs.d/snippets/"                 ;; personal snippets
        ))
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  :after (yasnippet))
#+END_SRC
* pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
:ensure t)
#+END_SRC
* custom functions
#+BEGIN_SRC emacs-lisp
(defun now ()
"Insert the current date time in this format '2018-09-10 Mon 11:15'"
(interactive)
(insert (format-time-string "%G-%m-%d %a %H:%M")))

(global-set-key (kbd "<f8>") 'now)
#+END_SRC
* keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f9>") 'org-pomodoro)
#+END_SRC
* Reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure t
:config
(require 'ox-reveal)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.7.0/")
(setq org-reveal-mathjax t))
(use-package htmlize
:ensure t)
#+END_SRC
* Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
:ensure t)
#+END_SRC
* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
:ensure t)
#+END_SRC
* Easy Hugo
#+BEGIN_SRC emacs-lisp
(use-package easy-hugo
  :ensure t
  :init
  (setq easy-hugo-basedir "~/develop/fun/OSS/ingorichter.io-website/")
  (setq easy-hugo-url "https://ingo-richter.io")
  (setq easy-hugo-sshdomain "blogdomain")
  (setq easy-hugo-root "/")
  (setq easy-hugo-previewtime "300")
  :bind ("C-c C-e" . easy-hugo))
#+END_SRC
* Smart Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
:config
(use-package smartparens-config)
(smartparens-global-mode t)
(show-smartparens-global-mode t))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Spacemacs and Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init
  (load-theme 'whiteboard t)
  (setq spacemacs-theme-org-agenda-height nil)
  (setq spacemacs-theme-org-height nil))

;; set sizes here to stop spacemacs theme resizing these
(set-face-attribute 'org-level-1 nil :height 1.0)
(set-face-attribute 'org-level-2 nil :height 1.0)
(set-face-attribute 'org-level-3 nil :height 1.0)
(set-face-attribute 'org-scheduled-today nil :height 1.0)
(set-face-attribute 'org-agenda-date-today nil :height 1.1)
(set-face-attribute 'org-table nil :foreground "#008787")

(use-package spaceline
  :ensure t
  :init
  (setq powerline-default-separator 'arrow-fade)
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme))
#+END_SRC
* Custom Functions
#+BEGIN_SRC emacs-lisp
;; Switch to Notes dir
(defun notes ()
  "Switch to my notes dir"
  (interactive)
  (find-file org-directory)
  )

(defun org-archive-done-tasks ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/DONE" 'tree))

#+END_SRC
