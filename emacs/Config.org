#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent

* repos
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (setq package-archive-priorities
	'(("melpa" . 0)
	  ("org" . 5)
	  ("gnu" . 10)))
#+END_SRC
* Global Stuff
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ingo Richter"
	user-mail-address "ingo.richter@gmail.com")

  (use-package try :ensure t)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

* Shell Settings
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode)
    :custom
    (sp-escape-quotes-after-insert nil)
    :config
    (require 'smartparens-config))

  (show-paren-mode t)
#+END_SRC
* User Interface Customization
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setenv "BROWSER" "firefox")
  (setq org-ellipsis "⤵")
#+END_SRC
* Doom Modeline and Themes
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package doom-modeline
	       :ensure t)
  (doom-modeline-init)
  (all-the-icons-install-fonts)

  (use-package doom-themes)
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  ;; (load-theme 'doom-nord-light)

  ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config)
#+END_SRC

* Fonts
#+begin_src emacs-lisp
    ;;;(set-frame-font "Fira Code 16" nil t)
  (set-frame-font "JetBrains Mono Medium 16" nil t)
  (defface propositum-agenda-heading
    '((default
	:font "JetBrains Mono Medium 28"
	:overline t))
    "custom face for the header-line in `org-ql-search' buffers"
    :group 'org-super-agenda)

  (defface propositum-agenda-header-line
    '((default
	:font "SF Mono Light 28"
	:inherit header-line))
    "custom face for the header-line in `org-ql-search' buffers"
    :group 'org-super-agenda)
#+end_src
* Org-mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package org
  ;; 	     :ensure t
  ;; 	     :pin org)

  (require 'org-protocol)

  (setq org-directory "~/Nextcloud/org"
	org-agenda-files (list org-directory)
	org-archive-location (concat org-directory "/archive/%s_archive::")
	org-default-notes-file (concat org-directory "/notes.org")
	org-default-todo-file (concat org-directory "/mylife.org")
	org-refile-location (concat org-directory "/refile.org")
	org-gcal-location (concat org-directory "/gcal.org")
	org-weekly-goals (concat org-directory "/weekly-goals.org")
	org-goals (concat org-directory "/goals.org")
	org-journal-location (concat org-directory "/journal/journal.org"))


  (setq org-capture-templates '(("t" "To Do Item" entry (file+headline org-refile-location "Todo")
				 "* TODO %^{Titel} %^g\n %?\n\n:LOGBOOK:\n - Added: %U\n:END:")
				("a" "Appointment" entry (file org-gcal-location)
				 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
				("n" "Note" entry (file+headline org-default-notes-file "Notes")
				 "* Note %^{Titel} %^g\n  %?\n  :LOGBOOK:\n - Added: %U\n:END:")
				("i" "Idee" entry (file+headline org-refile-location "Ideen")
				 "* Idee %^{Titel} %^g\n  %?\n  :LOGBOOK:\n - Added: %U\n:END:")
				("w" "Weekly Goals" entry
				 (file+datetree org-weekly-goals (format-time-string "%Y"))
				 "* %U\n\nHigh Level Ziele fuer die %(format-time-string "%W"). Woche\n - [ ] %(format-time-string "%W")$ x in die Spardose\n - [ ] Workout\n - [ ] Laufen")
				("j" "Journal" entry (file+datetree org-journal-location)
				 "* %U - %?\n  %i" :clock-in t :clock-resume t)))

   ;; use org-bullets for nicer formatting
  (use-package org-bullets
	       :ensure t
	       :config
	       (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))

  ;; Org-mode settings
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (global-font-lock-mode 1)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
				   (org-agenda-files :maxlevel . 9))))

  ;; have a timestamp added to finished items
  (setq org-log-done 'time)

  ;; capture templates
  (setq org-todo-keywords
	(quote (
		(sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
		(sequence "WAITING(W@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
;; this was mentioned in http://howardism.org/Technical/Emacs/literate-programming-tutorial.html
  (setq org-confirm-babel-evaluate nil
	org-src-fontify-natively t
	org-src-tab-acts-natively t)
#+END_SRC
* Org-Super-Agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :after org-agenda
    :custom-face
    (org-super-agenda-header ((default (:inherit propositum-agenda-heading))))
    :config
    (org-super-agenda-mode))

  (setq
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-include-diary nil
   org-agenda-block-separator nil
   org-agenda-compact-blocks t
   org-agenda-start-with-log-mode t)

  (setq org-super-agenda-groups
	'(
	  (:name "Today"
		 :time-grid t
		 :date today
		 :scheduled today
		 :order 1
		 :todo "TODAY")
	  (:name "Phone Calls"
		 :time-grid t
		 :tag "phone")
	  (:name "EMails"
		 :time-grid t
		 :tag "mail")
	  (:name "⭐ Important"
		 :priority "A")
	  (:name "In Progress"
		 :time-grid t
		 :todo "ACTIVE")
	  (:name "Finance"
		 :time-grid t
		 :tag "finance")
	  (:name "Deadlines"
		 :deadline today
		 :order 0)
	  (:name "Buy"
		 :time-grid t
		 :tag "buy")))
  (org-agenda nil "a")

  ;; (let ((org-super-agenda-groups
  ;; 	 '((:name "Today"
  ;; 		  :time-grid t
  ;; 		  :todo "TODAY")
  ;; 	   (:name "High Priority"
  ;; 		  :priority "A"
  ;; 		  :order 1)
  ;; 	   (:name "Work"
  ;; 		  :category "work"
  ;; 		  :tag "work"
  ;; 		  :order 2)
  ;; 	   (:name "Chores"
  ;; 		  :category "chores"
  ;; 		  :order 3)
  ;; 	   )))
  ;;   (org-agenda nil "a"))
#+END_SRC
* Org-Journal
#+begin_src emacs-lisp
  (use-package org-journal
    :defer t
    :custom
    (org-journal-dir "~/Nextcloud/org/journal/")
    (org-journal-date-format "%A, %d %B %Y"))

  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
     (pcase org-journal-file-type
       (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
       (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
       (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
       (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))
  (setq org-journal-file-header 'org-journal-file-header-func)


#+end_src
* Org-Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Nextcloud/org/roam")
    :bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n f" . org-roam-find-file)
		 ("C-c n g" . org-roam-show-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert)))
    :config
    (setq org-roam-capture-ref-templates
	  '(("r" "ref" plain (function org-roam-capture--get-point)
	     "%?"
	     :file-name "websites/${slug}"
	     :head "#+TITLE: ${title}\n#+roam_key: ${ref}\n#+HUGO_SLUG: ${slug}\n#+roam_tags: website\n#+title: ${title}\n\n- source :: ${ref}\n"
	     :unnarrowed t)))
    (require 'org-roam-protocol))
#+end_src
* Deft
#+begin_src emacs-lisp
  (use-package deft
      :after org
      :bind
      ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory "~/Nextcloud/org/roam/"))
#+end_src
* pomodoro
  #+BEGIN_SRC emacs-lisp
    (use-package org-pomodoro
      :ensure t)
  #+END_SRC
* CalDav
#+BEGIN_SRC emacs-lisp
  ;; ;; https://github.com/dengste/org-caldav
  ;;   (use-package org-caldav
  ;;     :ensure t
  ;;     :config
  ;;      (setq org-caldav-url "https://cloud.familie-richter.synology.me/remote.php/dav/calendars/Ingo"
  ;;        org-caldav-calendar-id "main"
  ;;        org-caldav-inbox "~/Nextcloud/org/gcal.org"
  ;;        org-caldav-save-directory "~/Nextcloud/org"
  ;;        org-caldav-files org-agenda-files
  ;;        org-icalendar-timezone "America/Los_Angeles"
  ;;        org-icalendar-date-time-format ";TZID=%Z:%Y%m%dT%H%M%S"))

  ;;    (add-hook 'org-agenda-mode-hook (lambda () (org-caldav-sync) ))
  ;;    (add-hook 'org-capture-after-finalize-hook (lambda () (org-caldav-sync) ))
#+END_SRC
* RSS Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (elfeed-set-max-connections 32)
    (setq elfeed-db-directory "~/Nextcloud/Emacs/elfeeddb"))

  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Nextcloud/Emacs/elfeed.org")))

  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup))

  ;; global keyboard shortcut to open elfeed
  (global-set-key (kbd "C-x w") 'elfeed)

  ;; sort by tags
  ;; https://github.com/skeeto/elfeed/issues/203
  (defun my-elfeed-tag-sort (a b)
    (let* ((a-tags (format "%s" (elfeed-entry-tags a)))
	   (b-tags (format "%s" (elfeed-entry-tags b)))) 
      (if (string= a-tags b-tags) 
	  (< (elfeed-entry-date b) (elfeed-entry-date a))) 
      (string< a-tags b-tags))) 
  (setf elfeed-search-sort-function #'my-elfeed-tag-sort)
#+end_src
* Custom Functions
#+begin_src emacs-lisp
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading))) "/DONE" 'tree))
#+end_src
* Custom Keymap
#+begin_src emacs-lisp
  (defun i/load-keymap ()
    (interactive)
    (define-prefix-command 'z-map)
    (global-set-key (kbd "C-=") 'z-map)
    (define-key z-map (kbd "a") 'org-archive-done-tasks)
    (define-key z-map (kbd "j") 'org-journal-new-entry))

  (i/load-keymap)

  (global-set-key (kbd "<f9>") 'org-pomodoro)

#+end_src
* Writeroom
#+begin_src emacs-lisp
  (use-package writeroom-mode)

  (with-eval-after-load 'writeroom-mode
    (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
    (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
    (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width))

#+end_src
* Email
#+begin_src emacs-lisp
  (defun load-if-exists (f)
    "load the elisp file is it exists and is readable"
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "~/.dotfiles/emacs/mu4econfig.el")
#+end_src
